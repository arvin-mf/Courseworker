// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: course.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createCourse = `-- name: CreateCourse :execresult
INSERT INTO courses (name, subname, user_id)
VALUES (?, ?, ?)
`

type CreateCourseParams struct {
	Name    string
	Subname sql.NullString
	UserID  string
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCourse, arg.Name, arg.Subname, arg.UserID)
}

const deleteCourse = `-- name: DeleteCourse :execresult
DELETE FROM courses WHERE id = ?
`

func (q *Queries) DeleteCourse(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCourse, id)
}

const getAllCourses = `-- name: GetAllCourses :many
SELECT id, name, subname, user_id, created_at, updated_at FROM courses WHERE user_id = ?
`

func (q *Queries) GetAllCourses(ctx context.Context, userID string) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getAllCourses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Subname,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseByID = `-- name: GetCourseByID :one
SELECT id, name, subname, user_id, created_at, updated_at FROM courses WHERE id = ?
`

func (q *Queries) GetCourseByID(ctx context.Context, id int64) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourseByID, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Subname,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIDFromCourse = `-- name: GetUserIDFromCourse :one
SELECT user_id FROM courses WHERE id = ?
`

func (q *Queries) GetUserIDFromCourse(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserIDFromCourse, id)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const updateCourse = `-- name: UpdateCourse :execresult
UPDATE courses
SET name = ?, subname = ?
WHERE id = ?
`

type UpdateCourseParams struct {
	Name    string
	Subname sql.NullString
	ID      int64
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCourse, arg.Name, arg.Subname, arg.ID)
}
